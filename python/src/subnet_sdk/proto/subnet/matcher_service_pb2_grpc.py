# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from subnet_sdk.proto.subnet import bid_pb2 as subnet_dot_bid__pb2
from subnet_sdk.proto.subnet import matcher_pb2 as subnet_dot_matcher__pb2
from subnet_sdk.proto.subnet import matcher_service_pb2 as subnet_dot_matcher__service__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in subnet/matcher_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MatcherServiceStub(object):
    """MatcherService defines the bid intake and matching control plane inside subnets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitBid = channel.unary_unary(
                '/subnet.v1.MatcherService/SubmitBid',
                request_serializer=subnet_dot_matcher__pb2.SubmitBidRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.SubmitBidResponse.FromString,
                _registered_method=True)
        self.SubmitBidBatch = channel.unary_unary(
                '/subnet.v1.MatcherService/SubmitBidBatch',
                request_serializer=subnet_dot_matcher__pb2.SubmitBidBatchRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.SubmitBidBatchResponse.FromString,
                _registered_method=True)
        self.GetIntentSnapshot = channel.unary_unary(
                '/subnet.v1.MatcherService/GetIntentSnapshot',
                request_serializer=subnet_dot_matcher__pb2.GetIntentSnapshotRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.GetIntentSnapshotResponse.FromString,
                _registered_method=True)
        self.StreamIntents = channel.unary_stream(
                '/subnet.v1.MatcherService/StreamIntents',
                request_serializer=subnet_dot_matcher__pb2.StreamIntentsRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.MatcherIntentUpdate.FromString,
                _registered_method=True)
        self.StreamBids = channel.unary_stream(
                '/subnet.v1.MatcherService/StreamBids',
                request_serializer=subnet_dot_matcher__pb2.StreamBidsRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.BidEvent.FromString,
                _registered_method=True)
        self.PublishMatchingResult = channel.unary_unary(
                '/subnet.v1.MatcherService/PublishMatchingResult',
                request_serializer=subnet_dot_matcher__pb2.MatchingResult.SerializeToString,
                response_deserializer=subnet_dot_bid__pb2.BidSubmissionAck.FromString,
                _registered_method=True)
        self.RespondToTask = channel.unary_unary(
                '/subnet.v1.MatcherService/RespondToTask',
                request_serializer=subnet_dot_matcher__pb2.RespondToTaskRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__pb2.RespondToTaskResponse.FromString,
                _registered_method=True)
        self.StreamTasks = channel.unary_stream(
                '/subnet.v1.MatcherService/StreamTasks',
                request_serializer=subnet_dot_matcher__service__pb2.StreamTasksRequest.SerializeToString,
                response_deserializer=subnet_dot_matcher__service__pb2.ExecutionTask.FromString,
                _registered_method=True)


class MatcherServiceServicer(object):
    """MatcherService defines the bid intake and matching control plane inside subnets.
    """

    def SubmitBid(self, request, context):
        """Agent submits a bid to the matcher.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitBidBatch(self, request, context):
        """Agent submits multiple bids to the matcher in batch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntentSnapshot(self, request, context):
        """Pull the latest bid snapshot for an intent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamIntents(self, request, context):
        """Stream intents that require bidding (server side streaming).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamBids(self, request, context):
        """Stream bid lifecycle events for an intent or agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMatchingResult(self, request, context):
        """Post matching result to RootLayer observers (optional off-chain broadcast).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondToTask(self, request, context):
        """Agent responds to a task assignment (accept/reject)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTasks(self, request, context):
        """Stream execution tasks for a specific agent (server side streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatcherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitBid': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitBid,
                    request_deserializer=subnet_dot_matcher__pb2.SubmitBidRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.SubmitBidResponse.SerializeToString,
            ),
            'SubmitBidBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitBidBatch,
                    request_deserializer=subnet_dot_matcher__pb2.SubmitBidBatchRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.SubmitBidBatchResponse.SerializeToString,
            ),
            'GetIntentSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntentSnapshot,
                    request_deserializer=subnet_dot_matcher__pb2.GetIntentSnapshotRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.GetIntentSnapshotResponse.SerializeToString,
            ),
            'StreamIntents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamIntents,
                    request_deserializer=subnet_dot_matcher__pb2.StreamIntentsRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.MatcherIntentUpdate.SerializeToString,
            ),
            'StreamBids': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamBids,
                    request_deserializer=subnet_dot_matcher__pb2.StreamBidsRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.BidEvent.SerializeToString,
            ),
            'PublishMatchingResult': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMatchingResult,
                    request_deserializer=subnet_dot_matcher__pb2.MatchingResult.FromString,
                    response_serializer=subnet_dot_bid__pb2.BidSubmissionAck.SerializeToString,
            ),
            'RespondToTask': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondToTask,
                    request_deserializer=subnet_dot_matcher__pb2.RespondToTaskRequest.FromString,
                    response_serializer=subnet_dot_matcher__pb2.RespondToTaskResponse.SerializeToString,
            ),
            'StreamTasks': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTasks,
                    request_deserializer=subnet_dot_matcher__service__pb2.StreamTasksRequest.FromString,
                    response_serializer=subnet_dot_matcher__service__pb2.ExecutionTask.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'subnet.v1.MatcherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('subnet.v1.MatcherService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MatcherService(object):
    """MatcherService defines the bid intake and matching control plane inside subnets.
    """

    @staticmethod
    def SubmitBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subnet.v1.MatcherService/SubmitBid',
            subnet_dot_matcher__pb2.SubmitBidRequest.SerializeToString,
            subnet_dot_matcher__pb2.SubmitBidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitBidBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subnet.v1.MatcherService/SubmitBidBatch',
            subnet_dot_matcher__pb2.SubmitBidBatchRequest.SerializeToString,
            subnet_dot_matcher__pb2.SubmitBidBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIntentSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subnet.v1.MatcherService/GetIntentSnapshot',
            subnet_dot_matcher__pb2.GetIntentSnapshotRequest.SerializeToString,
            subnet_dot_matcher__pb2.GetIntentSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamIntents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/subnet.v1.MatcherService/StreamIntents',
            subnet_dot_matcher__pb2.StreamIntentsRequest.SerializeToString,
            subnet_dot_matcher__pb2.MatcherIntentUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamBids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/subnet.v1.MatcherService/StreamBids',
            subnet_dot_matcher__pb2.StreamBidsRequest.SerializeToString,
            subnet_dot_matcher__pb2.BidEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishMatchingResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subnet.v1.MatcherService/PublishMatchingResult',
            subnet_dot_matcher__pb2.MatchingResult.SerializeToString,
            subnet_dot_bid__pb2.BidSubmissionAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RespondToTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subnet.v1.MatcherService/RespondToTask',
            subnet_dot_matcher__pb2.RespondToTaskRequest.SerializeToString,
            subnet_dot_matcher__pb2.RespondToTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/subnet.v1.MatcherService/StreamTasks',
            subnet_dot_matcher__service__pb2.StreamTasksRequest.SerializeToString,
            subnet_dot_matcher__service__pb2.ExecutionTask.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
