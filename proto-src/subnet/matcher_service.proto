syntax = "proto3";
package subnet.v1;

option go_package = "subnet/proto/subnet;pb";

import "subnet/bid.proto";
import "subnet/matcher.proto";

// MatcherService defines the bid intake and matching control plane inside subnets.
service MatcherService {
  // Agent submits a bid to the matcher.
  rpc SubmitBid(SubmitBidRequest) returns (SubmitBidResponse);

  // Agent submits multiple bids to the matcher in batch.
  rpc SubmitBidBatch(SubmitBidBatchRequest) returns (SubmitBidBatchResponse);

  // Pull the latest bid snapshot for an intent.
  rpc GetIntentSnapshot(GetIntentSnapshotRequest) returns (GetIntentSnapshotResponse);

  // Stream intents that require bidding (server side streaming).
  rpc StreamIntents(StreamIntentsRequest) returns (stream MatcherIntentUpdate);

  // Stream bid lifecycle events for an intent or agent.
  rpc StreamBids(StreamBidsRequest) returns (stream BidEvent);

  // Post matching result to RootLayer observers (optional off-chain broadcast).
  rpc PublishMatchingResult(MatchingResult) returns (BidSubmissionAck);

  // Agent responds to a task assignment (accept/reject)
  rpc RespondToTask(RespondToTaskRequest) returns (RespondToTaskResponse);

  // Stream execution tasks for a specific agent (server side streaming)
  rpc StreamTasks(StreamTasksRequest) returns (stream ExecutionTask);
}

// Request to stream tasks for an agent
message StreamTasksRequest {
  string agent_id = 1;
}

// Execution task sent to winning agent
message ExecutionTask {
  string task_id = 1;        // Same as assignment_id for tracking
  string intent_id = 2;
  string agent_id = 3;
  string bid_id = 4;
  int64 created_at = 5;
  int64 deadline = 6;
  bytes intent_data = 7;     // The actual task payload
  string intent_type = 8;    // Task type for executor selection
}
