// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/subnet/matcher_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatcherService_SubmitBid_FullMethodName             = "/subnet.v1.MatcherService/SubmitBid"
	MatcherService_GetIntentSnapshot_FullMethodName     = "/subnet.v1.MatcherService/GetIntentSnapshot"
	MatcherService_StreamIntents_FullMethodName         = "/subnet.v1.MatcherService/StreamIntents"
	MatcherService_StreamBids_FullMethodName            = "/subnet.v1.MatcherService/StreamBids"
	MatcherService_PublishMatchingResult_FullMethodName = "/subnet.v1.MatcherService/PublishMatchingResult"
	MatcherService_RespondToTask_FullMethodName         = "/subnet.v1.MatcherService/RespondToTask"
	MatcherService_StreamTasks_FullMethodName           = "/subnet.v1.MatcherService/StreamTasks"
)

// MatcherServiceClient is the client API for MatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MatcherService defines the bid intake and matching control plane inside subnets.
type MatcherServiceClient interface {
	// Agent submits a bid to the matcher.
	SubmitBid(ctx context.Context, in *SubmitBidRequest, opts ...grpc.CallOption) (*SubmitBidResponse, error)
	// Pull the latest bid snapshot for an intent.
	GetIntentSnapshot(ctx context.Context, in *GetIntentSnapshotRequest, opts ...grpc.CallOption) (*GetIntentSnapshotResponse, error)
	// Stream intents that require bidding (server side streaming).
	StreamIntents(ctx context.Context, in *StreamIntentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatcherIntentUpdate], error)
	// Stream bid lifecycle events for an intent or agent.
	StreamBids(ctx context.Context, in *StreamBidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BidEvent], error)
	// Post matching result to RootLayer observers (optional off-chain broadcast).
	PublishMatchingResult(ctx context.Context, in *MatchingResult, opts ...grpc.CallOption) (*BidSubmissionAck, error)
	// Agent responds to a task assignment (accept/reject)
	RespondToTask(ctx context.Context, in *RespondToTaskRequest, opts ...grpc.CallOption) (*RespondToTaskResponse, error)
	// Stream execution tasks for a specific agent (server side streaming)
	StreamTasks(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionTask], error)
}

type matcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatcherServiceClient(cc grpc.ClientConnInterface) MatcherServiceClient {
	return &matcherServiceClient{cc}
}

func (c *matcherServiceClient) SubmitBid(ctx context.Context, in *SubmitBidRequest, opts ...grpc.CallOption) (*SubmitBidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitBidResponse)
	err := c.cc.Invoke(ctx, MatcherService_SubmitBid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherServiceClient) GetIntentSnapshot(ctx context.Context, in *GetIntentSnapshotRequest, opts ...grpc.CallOption) (*GetIntentSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntentSnapshotResponse)
	err := c.cc.Invoke(ctx, MatcherService_GetIntentSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherServiceClient) StreamIntents(ctx context.Context, in *StreamIntentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MatcherIntentUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatcherService_ServiceDesc.Streams[0], MatcherService_StreamIntents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamIntentsRequest, MatcherIntentUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamIntentsClient = grpc.ServerStreamingClient[MatcherIntentUpdate]

func (c *matcherServiceClient) StreamBids(ctx context.Context, in *StreamBidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BidEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatcherService_ServiceDesc.Streams[1], MatcherService_StreamBids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBidsRequest, BidEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamBidsClient = grpc.ServerStreamingClient[BidEvent]

func (c *matcherServiceClient) PublishMatchingResult(ctx context.Context, in *MatchingResult, opts ...grpc.CallOption) (*BidSubmissionAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidSubmissionAck)
	err := c.cc.Invoke(ctx, MatcherService_PublishMatchingResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherServiceClient) RespondToTask(ctx context.Context, in *RespondToTaskRequest, opts ...grpc.CallOption) (*RespondToTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondToTaskResponse)
	err := c.cc.Invoke(ctx, MatcherService_RespondToTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matcherServiceClient) StreamTasks(ctx context.Context, in *StreamTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionTask], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MatcherService_ServiceDesc.Streams[2], MatcherService_StreamTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTasksRequest, ExecutionTask]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamTasksClient = grpc.ServerStreamingClient[ExecutionTask]

// MatcherServiceServer is the server API for MatcherService service.
// All implementations must embed UnimplementedMatcherServiceServer
// for forward compatibility.
//
// MatcherService defines the bid intake and matching control plane inside subnets.
type MatcherServiceServer interface {
	// Agent submits a bid to the matcher.
	SubmitBid(context.Context, *SubmitBidRequest) (*SubmitBidResponse, error)
	// Pull the latest bid snapshot for an intent.
	GetIntentSnapshot(context.Context, *GetIntentSnapshotRequest) (*GetIntentSnapshotResponse, error)
	// Stream intents that require bidding (server side streaming).
	StreamIntents(*StreamIntentsRequest, grpc.ServerStreamingServer[MatcherIntentUpdate]) error
	// Stream bid lifecycle events for an intent or agent.
	StreamBids(*StreamBidsRequest, grpc.ServerStreamingServer[BidEvent]) error
	// Post matching result to RootLayer observers (optional off-chain broadcast).
	PublishMatchingResult(context.Context, *MatchingResult) (*BidSubmissionAck, error)
	// Agent responds to a task assignment (accept/reject)
	RespondToTask(context.Context, *RespondToTaskRequest) (*RespondToTaskResponse, error)
	// Stream execution tasks for a specific agent (server side streaming)
	StreamTasks(*StreamTasksRequest, grpc.ServerStreamingServer[ExecutionTask]) error
	mustEmbedUnimplementedMatcherServiceServer()
}

// UnimplementedMatcherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatcherServiceServer struct{}

func (UnimplementedMatcherServiceServer) SubmitBid(context.Context, *SubmitBidRequest) (*SubmitBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBid not implemented")
}
func (UnimplementedMatcherServiceServer) GetIntentSnapshot(context.Context, *GetIntentSnapshotRequest) (*GetIntentSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntentSnapshot not implemented")
}
func (UnimplementedMatcherServiceServer) StreamIntents(*StreamIntentsRequest, grpc.ServerStreamingServer[MatcherIntentUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamIntents not implemented")
}
func (UnimplementedMatcherServiceServer) StreamBids(*StreamBidsRequest, grpc.ServerStreamingServer[BidEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBids not implemented")
}
func (UnimplementedMatcherServiceServer) PublishMatchingResult(context.Context, *MatchingResult) (*BidSubmissionAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMatchingResult not implemented")
}
func (UnimplementedMatcherServiceServer) RespondToTask(context.Context, *RespondToTaskRequest) (*RespondToTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondToTask not implemented")
}
func (UnimplementedMatcherServiceServer) StreamTasks(*StreamTasksRequest, grpc.ServerStreamingServer[ExecutionTask]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTasks not implemented")
}
func (UnimplementedMatcherServiceServer) mustEmbedUnimplementedMatcherServiceServer() {}
func (UnimplementedMatcherServiceServer) testEmbeddedByValue()                        {}

// UnsafeMatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatcherServiceServer will
// result in compilation errors.
type UnsafeMatcherServiceServer interface {
	mustEmbedUnimplementedMatcherServiceServer()
}

func RegisterMatcherServiceServer(s grpc.ServiceRegistrar, srv MatcherServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatcherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatcherService_ServiceDesc, srv)
}

func _MatcherService_SubmitBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherServiceServer).SubmitBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherService_SubmitBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherServiceServer).SubmitBid(ctx, req.(*SubmitBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherService_GetIntentSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherServiceServer).GetIntentSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherService_GetIntentSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherServiceServer).GetIntentSnapshot(ctx, req.(*GetIntentSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherService_StreamIntents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamIntentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatcherServiceServer).StreamIntents(m, &grpc.GenericServerStream[StreamIntentsRequest, MatcherIntentUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamIntentsServer = grpc.ServerStreamingServer[MatcherIntentUpdate]

func _MatcherService_StreamBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBidsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatcherServiceServer).StreamBids(m, &grpc.GenericServerStream[StreamBidsRequest, BidEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamBidsServer = grpc.ServerStreamingServer[BidEvent]

func _MatcherService_PublishMatchingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherServiceServer).PublishMatchingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherService_PublishMatchingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherServiceServer).PublishMatchingResult(ctx, req.(*MatchingResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherService_RespondToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondToTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatcherServiceServer).RespondToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatcherService_RespondToTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatcherServiceServer).RespondToTask(ctx, req.(*RespondToTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatcherService_StreamTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatcherServiceServer).StreamTasks(m, &grpc.GenericServerStream[StreamTasksRequest, ExecutionTask]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MatcherService_StreamTasksServer = grpc.ServerStreamingServer[ExecutionTask]

// MatcherService_ServiceDesc is the grpc.ServiceDesc for MatcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subnet.v1.MatcherService",
	HandlerType: (*MatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBid",
			Handler:    _MatcherService_SubmitBid_Handler,
		},
		{
			MethodName: "GetIntentSnapshot",
			Handler:    _MatcherService_GetIntentSnapshot_Handler,
		},
		{
			MethodName: "PublishMatchingResult",
			Handler:    _MatcherService_PublishMatchingResult_Handler,
		},
		{
			MethodName: "RespondToTask",
			Handler:    _MatcherService_RespondToTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIntents",
			Handler:       _MatcherService_StreamIntents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBids",
			Handler:       _MatcherService_StreamBids_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTasks",
			Handler:       _MatcherService_StreamTasks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/subnet/matcher_service.proto",
}
