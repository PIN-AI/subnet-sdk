// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/subnet/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ValidatorService_SubmitExecutionReport_FullMethodName  = "/subnet.v1.ValidatorService/SubmitExecutionReport"
	ValidatorService_GetCheckpoint_FullMethodName          = "/subnet.v1.ValidatorService/GetCheckpoint"
	ValidatorService_ProposeHeader_FullMethodName          = "/subnet.v1.ValidatorService/ProposeHeader"
	ValidatorService_SubmitSignature_FullMethodName        = "/subnet.v1.ValidatorService/SubmitSignature"
	ValidatorService_GetSignatures_FullMethodName          = "/subnet.v1.ValidatorService/GetSignatures"
	ValidatorService_GetValidatorSet_FullMethodName        = "/subnet.v1.ValidatorService/GetValidatorSet"
	ValidatorService_GetDoubleSignEvidences_FullMethodName = "/subnet.v1.ValidatorService/GetDoubleSignEvidences"
	ValidatorService_GetValidationPolicy_FullMethodName    = "/subnet.v1.ValidatorService/GetValidationPolicy"
	ValidatorService_GetVerificationRecords_FullMethodName = "/subnet.v1.ValidatorService/GetVerificationRecords"
	ValidatorService_GetValidatorMetrics_FullMethodName    = "/subnet.v1.ValidatorService/GetValidatorMetrics"
)

// ValidatorServiceClient is the client API for ValidatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Subnet Validator Service - handles execution reports and validation
type ValidatorServiceClient interface {
	// Agent submits execution report to validators
	SubmitExecutionReport(ctx context.Context, in *ExecutionReport, opts ...grpc.CallOption) (*Receipt, error)
	// Checkpoint operations
	GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*CheckpointHeader, error)
	ProposeHeader(ctx context.Context, in *CheckpointHeader, opts ...grpc.CallOption) (*Ack, error)
	SubmitSignature(ctx context.Context, in *SignatureSubmission, opts ...grpc.CallOption) (*Ack, error)
	GetSignatures(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Signature], error)
	GetValidatorSet(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*ValidatorSet, error)
	// Double sign detection
	GetDoubleSignEvidences(ctx context.Context, in *DoubleSignQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DoubleSignEvidence], error)
	// Validation and verification
	GetValidationPolicy(ctx context.Context, in *GetValidationPolicyRequest, opts ...grpc.CallOption) (*ValidationPolicy, error)
	GetVerificationRecords(ctx context.Context, in *GetVerificationRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerificationRecord], error)
	GetValidatorMetrics(ctx context.Context, in *GetValidatorMetricsRequest, opts ...grpc.CallOption) (*ValidatorMetrics, error)
}

type validatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorServiceClient(cc grpc.ClientConnInterface) ValidatorServiceClient {
	return &validatorServiceClient{cc}
}

func (c *validatorServiceClient) SubmitExecutionReport(ctx context.Context, in *ExecutionReport, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, ValidatorService_SubmitExecutionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*CheckpointHeader, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckpointHeader)
	err := c.cc.Invoke(ctx, ValidatorService_GetCheckpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) ProposeHeader(ctx context.Context, in *CheckpointHeader, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ValidatorService_ProposeHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) SubmitSignature(ctx context.Context, in *SignatureSubmission, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ValidatorService_SubmitSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) GetSignatures(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Signature], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[0], ValidatorService_GetSignatures_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetCheckpointRequest, Signature]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetSignaturesClient = grpc.ServerStreamingClient[Signature]

func (c *validatorServiceClient) GetValidatorSet(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*ValidatorSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatorSet)
	err := c.cc.Invoke(ctx, ValidatorService_GetValidatorSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) GetDoubleSignEvidences(ctx context.Context, in *DoubleSignQuery, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DoubleSignEvidence], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[1], ValidatorService_GetDoubleSignEvidences_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DoubleSignQuery, DoubleSignEvidence]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetDoubleSignEvidencesClient = grpc.ServerStreamingClient[DoubleSignEvidence]

func (c *validatorServiceClient) GetValidationPolicy(ctx context.Context, in *GetValidationPolicyRequest, opts ...grpc.CallOption) (*ValidationPolicy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationPolicy)
	err := c.cc.Invoke(ctx, ValidatorService_GetValidationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorServiceClient) GetVerificationRecords(ctx context.Context, in *GetVerificationRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerificationRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValidatorService_ServiceDesc.Streams[2], ValidatorService_GetVerificationRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetVerificationRecordsRequest, VerificationRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetVerificationRecordsClient = grpc.ServerStreamingClient[VerificationRecord]

func (c *validatorServiceClient) GetValidatorMetrics(ctx context.Context, in *GetValidatorMetricsRequest, opts ...grpc.CallOption) (*ValidatorMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatorMetrics)
	err := c.cc.Invoke(ctx, ValidatorService_GetValidatorMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatorServiceServer is the server API for ValidatorService service.
// All implementations must embed UnimplementedValidatorServiceServer
// for forward compatibility.
//
// Subnet Validator Service - handles execution reports and validation
type ValidatorServiceServer interface {
	// Agent submits execution report to validators
	SubmitExecutionReport(context.Context, *ExecutionReport) (*Receipt, error)
	// Checkpoint operations
	GetCheckpoint(context.Context, *GetCheckpointRequest) (*CheckpointHeader, error)
	ProposeHeader(context.Context, *CheckpointHeader) (*Ack, error)
	SubmitSignature(context.Context, *SignatureSubmission) (*Ack, error)
	GetSignatures(*GetCheckpointRequest, grpc.ServerStreamingServer[Signature]) error
	GetValidatorSet(context.Context, *GetCheckpointRequest) (*ValidatorSet, error)
	// Double sign detection
	GetDoubleSignEvidences(*DoubleSignQuery, grpc.ServerStreamingServer[DoubleSignEvidence]) error
	// Validation and verification
	GetValidationPolicy(context.Context, *GetValidationPolicyRequest) (*ValidationPolicy, error)
	GetVerificationRecords(*GetVerificationRecordsRequest, grpc.ServerStreamingServer[VerificationRecord]) error
	GetValidatorMetrics(context.Context, *GetValidatorMetricsRequest) (*ValidatorMetrics, error)
	mustEmbedUnimplementedValidatorServiceServer()
}

// UnimplementedValidatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValidatorServiceServer struct{}

func (UnimplementedValidatorServiceServer) SubmitExecutionReport(context.Context, *ExecutionReport) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExecutionReport not implemented")
}
func (UnimplementedValidatorServiceServer) GetCheckpoint(context.Context, *GetCheckpointRequest) (*CheckpointHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}
func (UnimplementedValidatorServiceServer) ProposeHeader(context.Context, *CheckpointHeader) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeHeader not implemented")
}
func (UnimplementedValidatorServiceServer) SubmitSignature(context.Context, *SignatureSubmission) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignature not implemented")
}
func (UnimplementedValidatorServiceServer) GetSignatures(*GetCheckpointRequest, grpc.ServerStreamingServer[Signature]) error {
	return status.Errorf(codes.Unimplemented, "method GetSignatures not implemented")
}
func (UnimplementedValidatorServiceServer) GetValidatorSet(context.Context, *GetCheckpointRequest) (*ValidatorSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorSet not implemented")
}
func (UnimplementedValidatorServiceServer) GetDoubleSignEvidences(*DoubleSignQuery, grpc.ServerStreamingServer[DoubleSignEvidence]) error {
	return status.Errorf(codes.Unimplemented, "method GetDoubleSignEvidences not implemented")
}
func (UnimplementedValidatorServiceServer) GetValidationPolicy(context.Context, *GetValidationPolicyRequest) (*ValidationPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidationPolicy not implemented")
}
func (UnimplementedValidatorServiceServer) GetVerificationRecords(*GetVerificationRecordsRequest, grpc.ServerStreamingServer[VerificationRecord]) error {
	return status.Errorf(codes.Unimplemented, "method GetVerificationRecords not implemented")
}
func (UnimplementedValidatorServiceServer) GetValidatorMetrics(context.Context, *GetValidatorMetricsRequest) (*ValidatorMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorMetrics not implemented")
}
func (UnimplementedValidatorServiceServer) mustEmbedUnimplementedValidatorServiceServer() {}
func (UnimplementedValidatorServiceServer) testEmbeddedByValue()                          {}

// UnsafeValidatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorServiceServer will
// result in compilation errors.
type UnsafeValidatorServiceServer interface {
	mustEmbedUnimplementedValidatorServiceServer()
}

func RegisterValidatorServiceServer(s grpc.ServiceRegistrar, srv ValidatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedValidatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValidatorService_ServiceDesc, srv)
}

func _ValidatorService_SubmitExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).SubmitExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_SubmitExecutionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).SubmitExecutionReport(ctx, req.(*ExecutionReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_GetCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).GetCheckpoint(ctx, req.(*GetCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_ProposeHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).ProposeHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_ProposeHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).ProposeHeader(ctx, req.(*CheckpointHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_SubmitSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).SubmitSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_SubmitSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).SubmitSignature(ctx, req.(*SignatureSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_GetSignatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCheckpointRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServiceServer).GetSignatures(m, &grpc.GenericServerStream[GetCheckpointRequest, Signature]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetSignaturesServer = grpc.ServerStreamingServer[Signature]

func _ValidatorService_GetValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).GetValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_GetValidatorSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).GetValidatorSet(ctx, req.(*GetCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_GetDoubleSignEvidences_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DoubleSignQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServiceServer).GetDoubleSignEvidences(m, &grpc.GenericServerStream[DoubleSignQuery, DoubleSignEvidence]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetDoubleSignEvidencesServer = grpc.ServerStreamingServer[DoubleSignEvidence]

func _ValidatorService_GetValidationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).GetValidationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_GetValidationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).GetValidationPolicy(ctx, req.(*GetValidationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorService_GetVerificationRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVerificationRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValidatorServiceServer).GetVerificationRecords(m, &grpc.GenericServerStream[GetVerificationRecordsRequest, VerificationRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValidatorService_GetVerificationRecordsServer = grpc.ServerStreamingServer[VerificationRecord]

func _ValidatorService_GetValidatorMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorServiceServer).GetValidatorMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidatorService_GetValidatorMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorServiceServer).GetValidatorMetrics(ctx, req.(*GetValidatorMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidatorService_ServiceDesc is the grpc.ServiceDesc for ValidatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subnet.v1.ValidatorService",
	HandlerType: (*ValidatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitExecutionReport",
			Handler:    _ValidatorService_SubmitExecutionReport_Handler,
		},
		{
			MethodName: "GetCheckpoint",
			Handler:    _ValidatorService_GetCheckpoint_Handler,
		},
		{
			MethodName: "ProposeHeader",
			Handler:    _ValidatorService_ProposeHeader_Handler,
		},
		{
			MethodName: "SubmitSignature",
			Handler:    _ValidatorService_SubmitSignature_Handler,
		},
		{
			MethodName: "GetValidatorSet",
			Handler:    _ValidatorService_GetValidatorSet_Handler,
		},
		{
			MethodName: "GetValidationPolicy",
			Handler:    _ValidatorService_GetValidationPolicy_Handler,
		},
		{
			MethodName: "GetValidatorMetrics",
			Handler:    _ValidatorService_GetValidatorMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSignatures",
			Handler:       _ValidatorService_GetSignatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDoubleSignEvidences",
			Handler:       _ValidatorService_GetDoubleSignEvidences_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVerificationRecords",
			Handler:       _ValidatorService_GetVerificationRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/subnet/service.proto",
}
