// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: subnet/validation.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidationPolicy_Mode int32

const (
	ValidationPolicy_MODE_UNSPECIFIED ValidationPolicy_Mode = 0
	ValidationPolicy_DETERMINISTIC    ValidationPolicy_Mode = 1
	ValidationPolicy_SAMPLED          ValidationPolicy_Mode = 2
	ValidationPolicy_EXTERNAL         ValidationPolicy_Mode = 3
	ValidationPolicy_MULTI_SOURCE     ValidationPolicy_Mode = 4
)

// Enum value maps for ValidationPolicy_Mode.
var (
	ValidationPolicy_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "DETERMINISTIC",
		2: "SAMPLED",
		3: "EXTERNAL",
		4: "MULTI_SOURCE",
	}
	ValidationPolicy_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"DETERMINISTIC":    1,
		"SAMPLED":          2,
		"EXTERNAL":         3,
		"MULTI_SOURCE":     4,
	}
)

func (x ValidationPolicy_Mode) Enum() *ValidationPolicy_Mode {
	p := new(ValidationPolicy_Mode)
	*p = x
	return p
}

func (x ValidationPolicy_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationPolicy_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_subnet_validation_proto_enumTypes[0].Descriptor()
}

func (ValidationPolicy_Mode) Type() protoreflect.EnumType {
	return &file_subnet_validation_proto_enumTypes[0]
}

func (x ValidationPolicy_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationPolicy_Mode.Descriptor instead.
func (ValidationPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0, 0}
}

type VerificationRecord_Verdict int32

const (
	VerificationRecord_VERDICT_UNSPECIFIED VerificationRecord_Verdict = 0
	VerificationRecord_PASS                VerificationRecord_Verdict = 1
	VerificationRecord_FAIL                VerificationRecord_Verdict = 2
	VerificationRecord_SKIP                VerificationRecord_Verdict = 3
)

// Enum value maps for VerificationRecord_Verdict.
var (
	VerificationRecord_Verdict_name = map[int32]string{
		0: "VERDICT_UNSPECIFIED",
		1: "PASS",
		2: "FAIL",
		3: "SKIP",
	}
	VerificationRecord_Verdict_value = map[string]int32{
		"VERDICT_UNSPECIFIED": 0,
		"PASS":                1,
		"FAIL":                2,
		"SKIP":                3,
	}
)

func (x VerificationRecord_Verdict) Enum() *VerificationRecord_Verdict {
	p := new(VerificationRecord_Verdict)
	*p = x
	return p
}

func (x VerificationRecord_Verdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationRecord_Verdict) Descriptor() protoreflect.EnumDescriptor {
	return file_subnet_validation_proto_enumTypes[1].Descriptor()
}

func (VerificationRecord_Verdict) Type() protoreflect.EnumType {
	return &file_subnet_validation_proto_enumTypes[1]
}

func (x VerificationRecord_Verdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationRecord_Verdict.Descriptor instead.
func (VerificationRecord_Verdict) EnumDescriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{1, 0}
}

type ValidationPolicy struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	PolicyId       string                  `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Version        string                  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	EffectiveEpoch uint64                  `protobuf:"varint,3,opt,name=effective_epoch,json=effectiveEpoch,proto3" json:"effective_epoch,omitempty"`
	Rules          *ValidationPolicy_Rules `protobuf:"bytes,4,opt,name=rules,proto3" json:"rules,omitempty"`
	Metadata       []byte                  `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"` // opaque policy metadata
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidationPolicy) Reset() {
	*x = ValidationPolicy{}
	mi := &file_subnet_validation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationPolicy) ProtoMessage() {}

func (x *ValidationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationPolicy.ProtoReflect.Descriptor instead.
func (*ValidationPolicy) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0}
}

func (x *ValidationPolicy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *ValidationPolicy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ValidationPolicy) GetEffectiveEpoch() uint64 {
	if x != nil {
		return x.EffectiveEpoch
	}
	return 0
}

func (x *ValidationPolicy) GetRules() *ValidationPolicy_Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ValidationPolicy) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type VerificationRecord struct {
	state               protoimpl.MessageState                  `protogen:"open.v1"`
	RecordId            string                                  `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	IntentId            string                                  `protobuf:"bytes,2,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	AgentId             string                                  `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ReportId            string                                  `protobuf:"bytes,4,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	PolicyId            string                                  `protobuf:"bytes,5,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ValidatorId         string                                  `protobuf:"bytes,6,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	Verdict             VerificationRecord_Verdict              `protobuf:"varint,7,opt,name=verdict,proto3,enum=subnet.v1.VerificationRecord_Verdict" json:"verdict,omitempty"`
	Confidence          float64                                 `protobuf:"fixed64,8,opt,name=confidence,proto3" json:"confidence,omitempty"` // 0.0 - 1.0
	Reason              string                                  `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	EvidenceChecked     []string                                `protobuf:"bytes,10,rep,name=evidence_checked,json=evidenceChecked,proto3" json:"evidence_checked,omitempty"`
	SamplingInfo        *VerificationRecord_SamplingInfo        `protobuf:"bytes,11,opt,name=sampling_info,json=samplingInfo,proto3" json:"sampling_info,omitempty"`
	ExternalAttestation *VerificationRecord_ExternalAttestation `protobuf:"bytes,12,opt,name=external_attestation,json=externalAttestation,proto3" json:"external_attestation,omitempty"`
	Timestamp           int64                                   `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ValidatorSignature  []byte                                  `protobuf:"bytes,14,opt,name=validator_signature,json=validatorSignature,proto3" json:"validator_signature,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VerificationRecord) Reset() {
	*x = VerificationRecord{}
	mi := &file_subnet_validation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationRecord) ProtoMessage() {}

func (x *VerificationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationRecord.ProtoReflect.Descriptor instead.
func (*VerificationRecord) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{1}
}

func (x *VerificationRecord) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *VerificationRecord) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *VerificationRecord) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *VerificationRecord) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *VerificationRecord) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *VerificationRecord) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *VerificationRecord) GetVerdict() VerificationRecord_Verdict {
	if x != nil {
		return x.Verdict
	}
	return VerificationRecord_VERDICT_UNSPECIFIED
}

func (x *VerificationRecord) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *VerificationRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *VerificationRecord) GetEvidenceChecked() []string {
	if x != nil {
		return x.EvidenceChecked
	}
	return nil
}

func (x *VerificationRecord) GetSamplingInfo() *VerificationRecord_SamplingInfo {
	if x != nil {
		return x.SamplingInfo
	}
	return nil
}

func (x *VerificationRecord) GetExternalAttestation() *VerificationRecord_ExternalAttestation {
	if x != nil {
		return x.ExternalAttestation
	}
	return nil
}

func (x *VerificationRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VerificationRecord) GetValidatorSignature() []byte {
	if x != nil {
		return x.ValidatorSignature
	}
	return nil
}

type PolicyQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubnetId      string                 `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	IntentType    string                 `protobuf:"bytes,2,opt,name=intent_type,json=intentType,proto3" json:"intent_type,omitempty"`
	Epoch         uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyQuery) Reset() {
	*x = PolicyQuery{}
	mi := &file_subnet_validation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyQuery) ProtoMessage() {}

func (x *PolicyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyQuery.ProtoReflect.Descriptor instead.
func (*PolicyQuery) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyQuery) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *PolicyQuery) GetIntentType() string {
	if x != nil {
		return x.IntentType
	}
	return ""
}

func (x *PolicyQuery) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type VerificationQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntentId      string                 `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	AgentId       string                 `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Limit         uint32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationQuery) Reset() {
	*x = VerificationQuery{}
	mi := &file_subnet_validation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationQuery) ProtoMessage() {}

func (x *VerificationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationQuery.ProtoReflect.Descriptor instead.
func (*VerificationQuery) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{3}
}

func (x *VerificationQuery) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *VerificationQuery) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *VerificationQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ValidationPolicy_SamplingParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SampleRate    float64                `protobuf:"fixed64,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"` // 0.0 - 1.0
	MinValidators uint32                 `protobuf:"varint,2,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationPolicy_SamplingParams) Reset() {
	*x = ValidationPolicy_SamplingParams{}
	mi := &file_subnet_validation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationPolicy_SamplingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationPolicy_SamplingParams) ProtoMessage() {}

func (x *ValidationPolicy_SamplingParams) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationPolicy_SamplingParams.ProtoReflect.Descriptor instead.
func (*ValidationPolicy_SamplingParams) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ValidationPolicy_SamplingParams) GetSampleRate() float64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *ValidationPolicy_SamplingParams) GetMinValidators() uint32 {
	if x != nil {
		return x.MinValidators
	}
	return 0
}

type ValidationPolicy_ExecutionLimits struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MaxExecTimeMs    uint64                 `protobuf:"varint,1,opt,name=max_exec_time_ms,json=maxExecTimeMs,proto3" json:"max_exec_time_ms,omitempty"`
	MaxMemoryMb      uint64                 `protobuf:"varint,2,opt,name=max_memory_mb,json=maxMemoryMb,proto3" json:"max_memory_mb,omitempty"`
	NetworkAllowlist []string               `protobuf:"bytes,3,rep,name=network_allowlist,json=networkAllowlist,proto3" json:"network_allowlist,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ValidationPolicy_ExecutionLimits) Reset() {
	*x = ValidationPolicy_ExecutionLimits{}
	mi := &file_subnet_validation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationPolicy_ExecutionLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationPolicy_ExecutionLimits) ProtoMessage() {}

func (x *ValidationPolicy_ExecutionLimits) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationPolicy_ExecutionLimits.ProtoReflect.Descriptor instead.
func (*ValidationPolicy_ExecutionLimits) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ValidationPolicy_ExecutionLimits) GetMaxExecTimeMs() uint64 {
	if x != nil {
		return x.MaxExecTimeMs
	}
	return 0
}

func (x *ValidationPolicy_ExecutionLimits) GetMaxMemoryMb() uint64 {
	if x != nil {
		return x.MaxMemoryMb
	}
	return 0
}

func (x *ValidationPolicy_ExecutionLimits) GetNetworkAllowlist() []string {
	if x != nil {
		return x.NetworkAllowlist
	}
	return nil
}

type ValidationPolicy_AntiCheat struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	SimilarityThreshold       uint32                 `protobuf:"varint,1,opt,name=similarity_threshold,json=similarityThreshold,proto3" json:"similarity_threshold,omitempty"`
	DuplicateSubmissionWindow uint64                 `protobuf:"varint,2,opt,name=duplicate_submission_window,json=duplicateSubmissionWindow,proto3" json:"duplicate_submission_window,omitempty"`
	Blacklist                 []string               `protobuf:"bytes,3,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ValidationPolicy_AntiCheat) Reset() {
	*x = ValidationPolicy_AntiCheat{}
	mi := &file_subnet_validation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationPolicy_AntiCheat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationPolicy_AntiCheat) ProtoMessage() {}

func (x *ValidationPolicy_AntiCheat) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationPolicy_AntiCheat.ProtoReflect.Descriptor instead.
func (*ValidationPolicy_AntiCheat) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ValidationPolicy_AntiCheat) GetSimilarityThreshold() uint32 {
	if x != nil {
		return x.SimilarityThreshold
	}
	return 0
}

func (x *ValidationPolicy_AntiCheat) GetDuplicateSubmissionWindow() uint64 {
	if x != nil {
		return x.DuplicateSubmissionWindow
	}
	return 0
}

func (x *ValidationPolicy_AntiCheat) GetBlacklist() []string {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

type ValidationPolicy_Rules struct {
	state            protoimpl.MessageState            `protogen:"open.v1"`
	RequiredEvidence []string                          `protobuf:"bytes,1,rep,name=required_evidence,json=requiredEvidence,proto3" json:"required_evidence,omitempty"` // e.g., ["transcript_root","env_fingerprint","inputs_hash","outputs_hash","proof_exec"]
	ValidationMode   ValidationPolicy_Mode             `protobuf:"varint,2,opt,name=validation_mode,json=validationMode,proto3,enum=subnet.v1.ValidationPolicy_Mode" json:"validation_mode,omitempty"`
	SamplingParams   *ValidationPolicy_SamplingParams  `protobuf:"bytes,3,opt,name=sampling_params,json=samplingParams,proto3" json:"sampling_params,omitempty"`    // optional presence
	ExecutionLimits  *ValidationPolicy_ExecutionLimits `protobuf:"bytes,4,opt,name=execution_limits,json=executionLimits,proto3" json:"execution_limits,omitempty"` // optional presence
	AntiCheat        *ValidationPolicy_AntiCheat       `protobuf:"bytes,5,opt,name=anti_cheat,json=antiCheat,proto3" json:"anti_cheat,omitempty"`                   // optional presence
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ValidationPolicy_Rules) Reset() {
	*x = ValidationPolicy_Rules{}
	mi := &file_subnet_validation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationPolicy_Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationPolicy_Rules) ProtoMessage() {}

func (x *ValidationPolicy_Rules) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationPolicy_Rules.ProtoReflect.Descriptor instead.
func (*ValidationPolicy_Rules) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ValidationPolicy_Rules) GetRequiredEvidence() []string {
	if x != nil {
		return x.RequiredEvidence
	}
	return nil
}

func (x *ValidationPolicy_Rules) GetValidationMode() ValidationPolicy_Mode {
	if x != nil {
		return x.ValidationMode
	}
	return ValidationPolicy_MODE_UNSPECIFIED
}

func (x *ValidationPolicy_Rules) GetSamplingParams() *ValidationPolicy_SamplingParams {
	if x != nil {
		return x.SamplingParams
	}
	return nil
}

func (x *ValidationPolicy_Rules) GetExecutionLimits() *ValidationPolicy_ExecutionLimits {
	if x != nil {
		return x.ExecutionLimits
	}
	return nil
}

func (x *ValidationPolicy_Rules) GetAntiCheat() *ValidationPolicy_AntiCheat {
	if x != nil {
		return x.AntiCheat
	}
	return nil
}

type VerificationRecord_SamplingInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSampled     bool                   `protobuf:"varint,1,opt,name=is_sampled,json=isSampled,proto3" json:"is_sampled,omitempty"`
	SampleSeed    string                 `protobuf:"bytes,2,opt,name=sample_seed,json=sampleSeed,proto3" json:"sample_seed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationRecord_SamplingInfo) Reset() {
	*x = VerificationRecord_SamplingInfo{}
	mi := &file_subnet_validation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationRecord_SamplingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationRecord_SamplingInfo) ProtoMessage() {}

func (x *VerificationRecord_SamplingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationRecord_SamplingInfo.ProtoReflect.Descriptor instead.
func (*VerificationRecord_SamplingInfo) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VerificationRecord_SamplingInfo) GetIsSampled() bool {
	if x != nil {
		return x.IsSampled
	}
	return false
}

func (x *VerificationRecord_SamplingInfo) GetSampleSeed() string {
	if x != nil {
		return x.SampleSeed
	}
	return ""
}

type VerificationRecord_ExternalAttestation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Reference     string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	Signature     []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerificationRecord_ExternalAttestation) Reset() {
	*x = VerificationRecord_ExternalAttestation{}
	mi := &file_subnet_validation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationRecord_ExternalAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationRecord_ExternalAttestation) ProtoMessage() {}

func (x *VerificationRecord_ExternalAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationRecord_ExternalAttestation.ProtoReflect.Descriptor instead.
func (*VerificationRecord_ExternalAttestation) Descriptor() ([]byte, []int) {
	return file_subnet_validation_proto_rawDescGZIP(), []int{1, 1}
}

func (x *VerificationRecord_ExternalAttestation) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *VerificationRecord_ExternalAttestation) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *VerificationRecord_ExternalAttestation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_subnet_validation_proto protoreflect.FileDescriptor

const file_subnet_validation_proto_rawDesc = "" +
	"\n" +
	"\x17subnet/validation.proto\x12\tsubnet.v1\"\xa1\b\n" +
	"\x10ValidationPolicy\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12'\n" +
	"\x0feffective_epoch\x18\x03 \x01(\x04R\x0eeffectiveEpoch\x127\n" +
	"\x05rules\x18\x04 \x01(\v2!.subnet.v1.ValidationPolicy.RulesR\x05rules\x12\x1a\n" +
	"\bmetadata\x18\x05 \x01(\fR\bmetadata\x1aX\n" +
	"\x0eSamplingParams\x12\x1f\n" +
	"\vsample_rate\x18\x01 \x01(\x01R\n" +
	"sampleRate\x12%\n" +
	"\x0emin_validators\x18\x02 \x01(\rR\rminValidators\x1a\x8b\x01\n" +
	"\x0fExecutionLimits\x12'\n" +
	"\x10max_exec_time_ms\x18\x01 \x01(\x04R\rmaxExecTimeMs\x12\"\n" +
	"\rmax_memory_mb\x18\x02 \x01(\x04R\vmaxMemoryMb\x12+\n" +
	"\x11network_allowlist\x18\x03 \x03(\tR\x10networkAllowlist\x1a\x9c\x01\n" +
	"\tAntiCheat\x121\n" +
	"\x14similarity_threshold\x18\x01 \x01(\rR\x13similarityThreshold\x12>\n" +
	"\x1bduplicate_submission_window\x18\x02 \x01(\x04R\x19duplicateSubmissionWindow\x12\x1c\n" +
	"\tblacklist\x18\x03 \x03(\tR\tblacklist\x1a\xf2\x02\n" +
	"\x05Rules\x12+\n" +
	"\x11required_evidence\x18\x01 \x03(\tR\x10requiredEvidence\x12I\n" +
	"\x0fvalidation_mode\x18\x02 \x01(\x0e2 .subnet.v1.ValidationPolicy.ModeR\x0evalidationMode\x12S\n" +
	"\x0fsampling_params\x18\x03 \x01(\v2*.subnet.v1.ValidationPolicy.SamplingParamsR\x0esamplingParams\x12V\n" +
	"\x10execution_limits\x18\x04 \x01(\v2+.subnet.v1.ValidationPolicy.ExecutionLimitsR\x0fexecutionLimits\x12D\n" +
	"\n" +
	"anti_cheat\x18\x05 \x01(\v2%.subnet.v1.ValidationPolicy.AntiCheatR\tantiCheat\"\\\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rDETERMINISTIC\x10\x01\x12\v\n" +
	"\aSAMPLED\x10\x02\x12\f\n" +
	"\bEXTERNAL\x10\x03\x12\x10\n" +
	"\fMULTI_SOURCE\x10\x04\"\xf1\x06\n" +
	"\x12VerificationRecord\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\tR\brecordId\x12\x1b\n" +
	"\tintent_id\x18\x02 \x01(\tR\bintentId\x12\x19\n" +
	"\bagent_id\x18\x03 \x01(\tR\aagentId\x12\x1b\n" +
	"\treport_id\x18\x04 \x01(\tR\breportId\x12\x1b\n" +
	"\tpolicy_id\x18\x05 \x01(\tR\bpolicyId\x12!\n" +
	"\fvalidator_id\x18\x06 \x01(\tR\vvalidatorId\x12?\n" +
	"\averdict\x18\a \x01(\x0e2%.subnet.v1.VerificationRecord.VerdictR\averdict\x12\x1e\n" +
	"\n" +
	"confidence\x18\b \x01(\x01R\n" +
	"confidence\x12\x16\n" +
	"\x06reason\x18\t \x01(\tR\x06reason\x12)\n" +
	"\x10evidence_checked\x18\n" +
	" \x03(\tR\x0fevidenceChecked\x12O\n" +
	"\rsampling_info\x18\v \x01(\v2*.subnet.v1.VerificationRecord.SamplingInfoR\fsamplingInfo\x12d\n" +
	"\x14external_attestation\x18\f \x01(\v21.subnet.v1.VerificationRecord.ExternalAttestationR\x13externalAttestation\x12\x1c\n" +
	"\ttimestamp\x18\r \x01(\x03R\ttimestamp\x12/\n" +
	"\x13validator_signature\x18\x0e \x01(\fR\x12validatorSignature\x1aN\n" +
	"\fSamplingInfo\x12\x1d\n" +
	"\n" +
	"is_sampled\x18\x01 \x01(\bR\tisSampled\x12\x1f\n" +
	"\vsample_seed\x18\x02 \x01(\tR\n" +
	"sampleSeed\x1am\n" +
	"\x13ExternalAttestation\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\"@\n" +
	"\aVerdict\x12\x17\n" +
	"\x13VERDICT_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04PASS\x10\x01\x12\b\n" +
	"\x04FAIL\x10\x02\x12\b\n" +
	"\x04SKIP\x10\x03\"a\n" +
	"\vPolicyQuery\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\x12\x1f\n" +
	"\vintent_type\x18\x02 \x01(\tR\n" +
	"intentType\x12\x14\n" +
	"\x05epoch\x18\x03 \x01(\x04R\x05epoch\"a\n" +
	"\x11VerificationQuery\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\x12\x19\n" +
	"\bagent_id\x18\x02 \x01(\tR\aagentId\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\rR\x05limit2\xb8\x01\n" +
	"\x11ValidationService\x12J\n" +
	"\x13GetValidationPolicy\x12\x16.subnet.v1.PolicyQuery\x1a\x1b.subnet.v1.ValidationPolicy\x12W\n" +
	"\x16GetVerificationRecords\x12\x1c.subnet.v1.VerificationQuery\x1a\x1d.subnet.v1.VerificationRecord0\x01B\x18Z\x16subnet/proto/subnet;pbb\x06proto3"

var (
	file_subnet_validation_proto_rawDescOnce sync.Once
	file_subnet_validation_proto_rawDescData []byte
)

func file_subnet_validation_proto_rawDescGZIP() []byte {
	file_subnet_validation_proto_rawDescOnce.Do(func() {
		file_subnet_validation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subnet_validation_proto_rawDesc), len(file_subnet_validation_proto_rawDesc)))
	})
	return file_subnet_validation_proto_rawDescData
}

var file_subnet_validation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_subnet_validation_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_subnet_validation_proto_goTypes = []any{
	(ValidationPolicy_Mode)(0),                     // 0: subnet.v1.ValidationPolicy.Mode
	(VerificationRecord_Verdict)(0),                // 1: subnet.v1.VerificationRecord.Verdict
	(*ValidationPolicy)(nil),                       // 2: subnet.v1.ValidationPolicy
	(*VerificationRecord)(nil),                     // 3: subnet.v1.VerificationRecord
	(*PolicyQuery)(nil),                            // 4: subnet.v1.PolicyQuery
	(*VerificationQuery)(nil),                      // 5: subnet.v1.VerificationQuery
	(*ValidationPolicy_SamplingParams)(nil),        // 6: subnet.v1.ValidationPolicy.SamplingParams
	(*ValidationPolicy_ExecutionLimits)(nil),       // 7: subnet.v1.ValidationPolicy.ExecutionLimits
	(*ValidationPolicy_AntiCheat)(nil),             // 8: subnet.v1.ValidationPolicy.AntiCheat
	(*ValidationPolicy_Rules)(nil),                 // 9: subnet.v1.ValidationPolicy.Rules
	(*VerificationRecord_SamplingInfo)(nil),        // 10: subnet.v1.VerificationRecord.SamplingInfo
	(*VerificationRecord_ExternalAttestation)(nil), // 11: subnet.v1.VerificationRecord.ExternalAttestation
}
var file_subnet_validation_proto_depIdxs = []int32{
	9,  // 0: subnet.v1.ValidationPolicy.rules:type_name -> subnet.v1.ValidationPolicy.Rules
	1,  // 1: subnet.v1.VerificationRecord.verdict:type_name -> subnet.v1.VerificationRecord.Verdict
	10, // 2: subnet.v1.VerificationRecord.sampling_info:type_name -> subnet.v1.VerificationRecord.SamplingInfo
	11, // 3: subnet.v1.VerificationRecord.external_attestation:type_name -> subnet.v1.VerificationRecord.ExternalAttestation
	0,  // 4: subnet.v1.ValidationPolicy.Rules.validation_mode:type_name -> subnet.v1.ValidationPolicy.Mode
	6,  // 5: subnet.v1.ValidationPolicy.Rules.sampling_params:type_name -> subnet.v1.ValidationPolicy.SamplingParams
	7,  // 6: subnet.v1.ValidationPolicy.Rules.execution_limits:type_name -> subnet.v1.ValidationPolicy.ExecutionLimits
	8,  // 7: subnet.v1.ValidationPolicy.Rules.anti_cheat:type_name -> subnet.v1.ValidationPolicy.AntiCheat
	4,  // 8: subnet.v1.ValidationService.GetValidationPolicy:input_type -> subnet.v1.PolicyQuery
	5,  // 9: subnet.v1.ValidationService.GetVerificationRecords:input_type -> subnet.v1.VerificationQuery
	2,  // 10: subnet.v1.ValidationService.GetValidationPolicy:output_type -> subnet.v1.ValidationPolicy
	3,  // 11: subnet.v1.ValidationService.GetVerificationRecords:output_type -> subnet.v1.VerificationRecord
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_subnet_validation_proto_init() }
func file_subnet_validation_proto_init() {
	if File_subnet_validation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subnet_validation_proto_rawDesc), len(file_subnet_validation_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subnet_validation_proto_goTypes,
		DependencyIndexes: file_subnet_validation_proto_depIdxs,
		EnumInfos:         file_subnet_validation_proto_enumTypes,
		MessageInfos:      file_subnet_validation_proto_msgTypes,
	}.Build()
	File_subnet_validation_proto = out.File
	file_subnet_validation_proto_goTypes = nil
	file_subnet_validation_proto_depIdxs = nil
}
