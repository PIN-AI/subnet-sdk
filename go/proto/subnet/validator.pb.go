// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: subnet/validator.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Validator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pubkey        []byte                 `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Weight        uint64                 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Endpoint      string                 `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Validator) Reset() {
	*x = Validator{}
	mi := &file_subnet_validator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_subnet_validator_proto_rawDescGZIP(), []int{0}
}

func (x *Validator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Validator) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *Validator) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Validator) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type ValidatorSet struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Validators     []*Validator           `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	MinValidators  int32                  `protobuf:"varint,2,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`    // >=4
	ThresholdNum   int32                  `protobuf:"varint,3,opt,name=threshold_num,json=thresholdNum,proto3" json:"threshold_num,omitempty"`       // default 3
	ThresholdDenom int32                  `protobuf:"varint,4,opt,name=threshold_denom,json=thresholdDenom,proto3" json:"threshold_denom,omitempty"` // default 4
	EffectiveEpoch uint64                 `protobuf:"varint,5,opt,name=effective_epoch,json=effectiveEpoch,proto3" json:"effective_epoch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	mi := &file_subnet_validator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_subnet_validator_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorSet) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *ValidatorSet) GetMinValidators() int32 {
	if x != nil {
		return x.MinValidators
	}
	return 0
}

func (x *ValidatorSet) GetThresholdNum() int32 {
	if x != nil {
		return x.ThresholdNum
	}
	return 0
}

func (x *ValidatorSet) GetThresholdDenom() int32 {
	if x != nil {
		return x.ThresholdDenom
	}
	return 0
}

func (x *ValidatorSet) GetEffectiveEpoch() uint64 {
	if x != nil {
		return x.EffectiveEpoch
	}
	return 0
}

type SignatureSubmission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CpHash        []byte                 `protobuf:"bytes,1,opt,name=cp_hash,json=cpHash,proto3" json:"cp_hash,omitempty"` // canonical hash of header
	Signature     *Signature             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SignerId      string                 `protobuf:"bytes,3,opt,name=signer_id,json=signerId,proto3" json:"signer_id,omitempty"` // explicit signer id
	Bit           uint32                 `protobuf:"varint,4,opt,name=bit,proto3" json:"bit,omitempty"`                          // bitmap position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignatureSubmission) Reset() {
	*x = SignatureSubmission{}
	mi := &file_subnet_validator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureSubmission) ProtoMessage() {}

func (x *SignatureSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_validator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureSubmission.ProtoReflect.Descriptor instead.
func (*SignatureSubmission) Descriptor() ([]byte, []int) {
	return file_subnet_validator_proto_rawDescGZIP(), []int{2}
}

func (x *SignatureSubmission) GetCpHash() []byte {
	if x != nil {
		return x.CpHash
	}
	return nil
}

func (x *SignatureSubmission) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignatureSubmission) GetSignerId() string {
	if x != nil {
		return x.SignerId
	}
	return ""
}

func (x *SignatureSubmission) GetBit() uint32 {
	if x != nil {
		return x.Bit
	}
	return 0
}

var File_subnet_validator_proto protoreflect.FileDescriptor

const file_subnet_validator_proto_rawDesc = "" +
	"\n" +
	"\x16subnet/validator.proto\x12\tsubnet.v1\x1a\x17subnet/checkpoint.proto\"g\n" +
	"\tValidator\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06pubkey\x18\x02 \x01(\fR\x06pubkey\x12\x16\n" +
	"\x06weight\x18\x03 \x01(\x04R\x06weight\x12\x1a\n" +
	"\bendpoint\x18\x04 \x01(\tR\bendpoint\"\xe2\x01\n" +
	"\fValidatorSet\x124\n" +
	"\n" +
	"validators\x18\x01 \x03(\v2\x14.subnet.v1.ValidatorR\n" +
	"validators\x12%\n" +
	"\x0emin_validators\x18\x02 \x01(\x05R\rminValidators\x12#\n" +
	"\rthreshold_num\x18\x03 \x01(\x05R\fthresholdNum\x12'\n" +
	"\x0fthreshold_denom\x18\x04 \x01(\x05R\x0ethresholdDenom\x12'\n" +
	"\x0feffective_epoch\x18\x05 \x01(\x04R\x0eeffectiveEpoch\"\x91\x01\n" +
	"\x13SignatureSubmission\x12\x17\n" +
	"\acp_hash\x18\x01 \x01(\fR\x06cpHash\x122\n" +
	"\tsignature\x18\x02 \x01(\v2\x14.subnet.v1.SignatureR\tsignature\x12\x1b\n" +
	"\tsigner_id\x18\x03 \x01(\tR\bsignerId\x12\x10\n" +
	"\x03bit\x18\x04 \x01(\rR\x03bitB\x18Z\x16subnet/proto/subnet;pbb\x06proto3"

var (
	file_subnet_validator_proto_rawDescOnce sync.Once
	file_subnet_validator_proto_rawDescData []byte
)

func file_subnet_validator_proto_rawDescGZIP() []byte {
	file_subnet_validator_proto_rawDescOnce.Do(func() {
		file_subnet_validator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subnet_validator_proto_rawDesc), len(file_subnet_validator_proto_rawDesc)))
	})
	return file_subnet_validator_proto_rawDescData
}

var file_subnet_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_subnet_validator_proto_goTypes = []any{
	(*Validator)(nil),           // 0: subnet.v1.Validator
	(*ValidatorSet)(nil),        // 1: subnet.v1.ValidatorSet
	(*SignatureSubmission)(nil), // 2: subnet.v1.SignatureSubmission
	(*Signature)(nil),           // 3: subnet.v1.Signature
}
var file_subnet_validator_proto_depIdxs = []int32{
	0, // 0: subnet.v1.ValidatorSet.validators:type_name -> subnet.v1.Validator
	3, // 1: subnet.v1.SignatureSubmission.signature:type_name -> subnet.v1.Signature
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_subnet_validator_proto_init() }
func file_subnet_validator_proto_init() {
	if File_subnet_validator_proto != nil {
		return
	}
	file_subnet_checkpoint_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subnet_validator_proto_rawDesc), len(file_subnet_validator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subnet_validator_proto_goTypes,
		DependencyIndexes: file_subnet_validator_proto_depIdxs,
		MessageInfos:      file_subnet_validator_proto_msgTypes,
	}.Build()
	File_subnet_validator_proto = out.File
	file_subnet_validator_proto_goTypes = nil
	file_subnet_validator_proto_depIdxs = nil
}
